name: $(Rev:r)
appendCommitMessageToRunName: false

resources:
  repositories:
    - repository: shared
      type: github
      endpoint: svcdawsdev
      name: RogersCommunications/enterprise-ado-pipelines
      ref: refs/heads/test-notification

trigger: none
pr: none
parameters:
  - name: Browser
    displayName: Test Browser
    type: string
    default: saucechrome
  - name: Language
    displayName: Test Language
    type: string
    default: en
    values:
      - en
      - fr
  - name: ThreadCount
    displayName: Number of parallel test sessions
    type: string
    default: 1
  - name: TunnelRequired
    displayName: Is Sauce Tunnel required? Select No if AUT is public facing
    type: string
    default: Yes
  - name: Groups
    displayName: Groups names separated by comma
    type: string
    default: Sanity
  - name: TestProfile
    displayName: Only used for reporting - has no impact on test runs
    type: string
    default: DefaultProfile
  - name: IndividualTests
    displayName: Individual tests to be passed as Test1 Test2 Test3 Test4 and so on
    type: string
    default: NULL
  - name: Environment
    displayName: Environment
    type: string
    default: qaAuto
    values:
      - qaAuto
      - qa4
      - qaAuto2
extends:
  template: generic-utility-1.yml@shared
  parameters:
    name: Output
    pool: openjdk11-azure
    teams: https://rcirogers.webhook.office.com/webhookb2/ea0efc65-a072-4ceb-b3c5-2f13266cabe7@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/IncomingWebhook/fe14de9c5ab64cbd85bf87c839bfa888/dd90430a-a35c-4677-94d4-750498514868
    reports: "https://qa1.rogers.com/Digital-QE/report"
    groups:
      - common
      - artifactory_serv_svc_dawsdev
      - global
      - github_daws_svc_account
    steps:
      - checkout: self
        submodules: true

      - template: jobs/gradle/steps/cache.yml@shared
        parameters:
          use_cache_ignore: false

      - script: |
          generateTestString(){
            local input="${1}"
            input="$(echo ${input} | xargs)"
            input=$(echo "${input}" | sed 's/.java//g')
            newString=""
            input_array=(${input})
            for i in "${input_array[@]}"; do
              newString="${newString}--tests ${i} "
            done
            echo "${newString}"
          }
          export GIT_COMMIT=$BUILD_SOURCEVERSION
          export BRANCH_NAME=$BUILD_SOURCEBRANCHNAME
          sh github-credentials.sh
          sh artifactory-credentials.sh
          sh sonarqube-credentials.sh
          gradle wrapper
          if [[ ${{parameters.IndividualTests}} == "NULL" ]]; then
            ./gradlew sauceTest -PEnvironment=${{parameters.Environment}} -Ptest_browser=${{parameters.Browser}} -Ptest_language=${{parameters.Language}} -Ptest_groupName='${{parameters.Groups}}' -Ptest_threadCount=${{parameters.ThreadCount}} -PTunnelRequired='${{parameters.TunnelRequired}}' -i --stacktrace
          else
            ./gradlew sauceTest -PEnvironment=${{parameters.Environment}} -Ptest_browser=${{parameters.Browser}} -Ptest_language=${{parameters.Language}} $(generateTestString "${{parameters.IndividualTests}}") -Ptest_threadCount=${{parameters.ThreadCount}} -PTunnelRequired='${{parameters.TunnelRequired}}' -i --stacktrace
          fi
        displayName: Run Test
        env:
          ARTIFACTORY_CREDENTIALS_PSW: $(ARTIFACTORY_CREDENTIALS_PSW)
          ARTIFACTORY_CREDENTIALS_USR: $(ARTIFACTORY_CREDENTIALS_USR)
          GITHUB_CREDENTIALS_PSW: $(GITHUB_CREDENTIALS_PSW)
          GITHUB_CREDENTIALS_USR: $(GITHUB_CREDENTIALS_USR)
          SAUCE_USERNAME: $(SAUCE_USERNAME)
          SAUCE_ACCESS_KEY: $(SAUCE_ACCESS_KEY)
          NETSTORAGE_HOST: $(NETSTORAGE_HOST)
          NETSTORAGE_ID: $(NETSTORAGE_ID)
          NETSTORAGE_ACCESS_KEY: $(NETSTORAGE_ACCESS_KEY)
          EMAIL_USERNAME: $(EMAIL_USERNAME)
          EMAIL_PASSWORD: $(EMAIL_PASSWORD)
          XRAY_PROD_CRED_USR: $(XRAY_PROD_CRED_USR)
          XRAY_PROD_CRED_PSW: $(XRAY_PROD_CRED_PSW)
          MaestroLoginID: $(MaestroLoginID)
          MaestroUsrID: $(MaestroUsrID)
          champLoginUserName: $(champLoginUserName)
          champLoginPassword: $(champLoginPassword)
