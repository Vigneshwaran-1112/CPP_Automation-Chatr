plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.28.1'
//    id 'io.github.karthick1110.SauceConnectPlugin' version '0.0.6'
}

group 'org.rogers'
version '1.0-SNAPSHOT'

sourceCompatibility = '21'

repositories {
    //mavenLocal()
    maven {
        url = "${artifactory_url}/${artifactory_repoKey}"
        credentials {
            username = "${artifactory_username}"
            password = "${artifactory_password}"
        }
    }
    mavenCentral()
}
ext {
    suites = System.getProperty("suites")
}

task printbuilddirectory {
    println("printing bulid directory")
    println(projectDir)
}

dependencies {

    // implementation'automation-utils:common-utils:1.91-SNAPSHOT'
    implementation'automation-utils:common-utils:latest.release'
    implementation 'org.yaml:snakeyaml:1.24'
    testImplementation 'org.testng:testng:7.1.0'
    implementation group: 'tech.tablesaw', name: 'tablesaw-excel', version: '0.43.1'
    implementation 'poi:poi-contrib-2.5.1-final:20040804'
    implementation group: 'org.apache-extras.beanshell', name: 'bsh',version: '2.0b6'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
}

//def getTunnelName() {
//    def tunnelName = "SampleTest" + System.getenv('BUILD_TIMESTAMP')
//    tunnelName = tunnelName.replaceAll(":","")
//    tunnelName = tunnelName.replaceAll(" ","")
//    return tunnelName
//}
//
//def sauce = [
//		username: sauceAuth.username,
//		key     : sauceAuth.key,
//]

// sauceconnect {
//     username = System.getenv('SAUCE_USERNAME')
//     key = System.getenv('SAUCE_ACCESS_KEY')
//     options = "-D esfapi.rogers.com,www.rogers.com,bss.rogers.com -i " + getTunnelName() + " --no-remove-colliding-tunnels"
// }

//sauceAuth {
//	username = System.getenv('SAUCE_USERNAME')
//	key = System.getenv('SAUCE_ACCESS_KEY')
//	options = "--tunnel-pool --tunnel-name myTunnel "
//}


// task "sauceTest"(dependsOn: startSauceConnect , type: Test) {
////task "sauceTest"(type: Test) {
//    if(!test_browser){
//        test_browser='saucechrome'
//    }
//
//    if (!test_browser.contains('sauce')){
//        def browser = 'sauce'+test_browser
//        test_browser = browser
//    }
//
//    systemProperty 'Browser', test_browser
//    systemProperty 'Language', test_language
//    systemProperty 'TunnelRequired', TunnelRequired
//    systemProperty 'Environment', Environment
//    //systemProperty 'TunnelName', tunnelName
//    systemProperty 'TunnelName', TunnelName
//    systemProperty 'parentTunnelOwner', parentTunnelOwner
//    systemProperty 'EmailId', emailId
//    systemProperty 'XrayImportFlag', xray_import_flag
//    systemProperty 'TestPlanKey',test_plan_key
//    systemProperty 'TestExecutionKey',test_execution_key
//    systemProperty 'JiraProjectKey', jira_project_key
//    systemProperty 'JiraAssignee', test_jira_assignee
//    systemProperty 'JiraReporter', test_jira_reporter
//    systemProperty 'PageLoadStrategy',PageLoadStrategy
//
//    useTestNG(){
//        outputDirectory = file("$project.buildDir//testngOutput")
//        useDefaultListeners =true
//        parallel = test_parallel
//        threadCount = test_threadCount as int
//        Set listeners = [ "com.rogers.test.listeners.report.Listener" , "com.rogers.test.listeners.AnnotationTransformer"]
//        setListeners(listeners)
//        if (project.hasProperty('test_groupName')){
//            includeGroups test_groupName
//            System.out.println("**************************************"+test_groupName)
//        }
//    }
//}

//To shutdown the sauceconnect
//sauceTest.finalizedBy stopSauceConnect

task "localTest"(type: Test) {
    if (test_browser && test_browser.contains('sauce')){
        def browser = test_browser.replace('sauce','')
        test_browser = browser
    }
    systemProperty 'Browser', test_browser
    systemProperty 'Language', test_language
    systemProperty 'Environment', Environment
    systemProperty 'XrayImportFlag', xray_import_flag
    systemProperty 'EmailId', emailId
    systemProperty 'TestPlanKey',test_plan_key
    systemProperty 'TestExecutionKey',test_execution_key
    systemProperty 'JiraProjectKey', jira_project_key
    systemProperty 'JiraAssignee', test_jira_assignee
    systemProperty 'JiraReporter', test_jira_reporter
    systemProperty 'PageLoadStrategy',PageLoadStrategy

    systemProperties(System.getProperties())
    outputs.upToDateWhen { false }  // Always run tests

    useTestNG() {
        outputDirectory = file("$project.buildDir//testngOutput")
        useDefaultListeners =true
        parallel = test_parallel
        threadCount = test_threadCount as int
        Set listeners = [ "com.rogers.test.listeners.report.Listener" , "com.rogers.test.listeners.AnnotationTransformer"]
        setListeners(listeners)
        if (project.suites == null) {
            // suites 'src/test/suites/autoPay_twoStep.xml'
        } else {
            for (item in project.suites?.split(',')) {
                suites "src/test/java/com/rogers/test/suites/${item}.xml"
            }
        }
        if (project.hasProperty('test_groupName')){
            includeGroups test_groupName
            System.out.println("**************************************"+test_groupName)
        }

        /*if (project.env != null) {
            systemProperty "env", project.env
        }

        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            showExceptions true
            showCauses true
            showStackTraces true
            showStandardStreams = true
            exceptionFormat = "full"
        }
        afterSuite { suite, result ->
            result.exception?.printStackTrace()
        }*/
    }
}

//configurations {
//    published
//}

compileJava {
    options.encoding = 'UTF-8'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

//javadoc {
//    source = sourceSets.main.allJava
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    archiveClassifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    published sourceJar
//    published javadocJar
//}
//
//publishing {
//    publications {
//        maven(MavenPublication) {
//            from components.java
//            groupId = "${project.group}"
//        }
//    }
//}
//
//artifactory {
//    contextUrl = "${artifactory_url}"
//    publish {
//        repository {
//            repoKey = "${artifactory_repoKey}"
//            username = "${artifactory_username}"
//            password = "${artifactory_password}"
//        }
//        defaults {
//            publications('maven')
//            publishConfigs('archives', 'published')
//            publishBuildInfo = true
//            publishArtifacts = true
//            publishPom = true
//            publishIvy = false
//        }
//    }
//}
//
//artifactoryPublish {
//    dependsOn jar, sourceJar, javadocJar
//}

wrapper{
    gradleVersion = "8.5"
}
